name: Stage 1 CI â€” Test, Build and Push Images to ACR

on:
  workflow_dispatch:
  push:
    branches: [ testing ]

env:

  IMAGE_TAG: ${{ github.sha }}-${{ github.run_id }}

jobs:
  test_backends:
    name: Run backend tests
    runs-on: ubuntu-latest

    services:
      product_db:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: products
        options: >-
          --health-cmd "pg_isready -U postgres"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      order_db:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: orders
        options: >-
          --health-cmd "pg_isready -U postgres"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5433:5432

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          # install each service's deps if present
          for req in backend/*/requirements.txt; do
            echo "Installing $req"
            pip install -r "$req"
          done
          python -m pip install pytest

      - name: Test product_service
        working-directory: backend/product_service
        env:
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5432
          POSTGRES_DB: products
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        run: |
          if [ -d tests ] || ls -1 test_*.py 2>/dev/null | grep -q .; then
            pytest -q --junitxml=junit-product_service.xml
          else
            echo "No tests for product_service"
          fi

      - name: Test order_service
        working-directory: backend/order_service
        env:
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5433
          POSTGRES_DB: orders
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        run: |
          if [ -d tests ] || ls -1 test_*.py 2>/dev/null | grep -q .; then
            pytest -q --junitxml=junit-order_service.xml
          else
            echo "No tests for order_service"
          fi

      - name: Test customer_service (optional)
        working-directory: backend/customer_service
        continue-on-error: true
        run: |
          if [ -d tests ] || ls -1 test_*.py 2>/dev/null | grep -q .; then
            pytest -q --junitxml=junit-customer_service.xml
          else
            echo "No tests for customer_service"
          fi

      - name: Upload JUnit reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: junit-reports
          path: |
            backend/product_service/junit-product_service.xml
            backend/order_service/junit-order_service.xml
            backend/customer_service/junit-customer_service.xml
          if-no-files-found: ignore

  build_and_push_images:
    name: Build & push images to ACR
    runs-on: ubuntu-latest
    needs: test_backends

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # Login to Azure using Service Principal (stored in AZURE_CREDENTIALS secret)
      - name: Azure login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      # Login to ACR using the Azure CLI session
      - name: ACR login (az acr login)
        run: az acr login -n "${{ secrets.ACR_NAME }}"

      # Resolve the login server (fallback if not supplied)
      - name: Resolve ACR login server
        id: acr
        run: |
          if [ -z "${{ secrets.ACR_LOGIN_SERVER }}" ]; then
            echo "server=$(az acr show -n ${{ secrets.ACR_NAME }} --query loginServer -o tsv)" >> $GITHUB_OUTPUT
          else
            echo "server=${{ secrets.ACR_LOGIN_SERVER }}" >> $GITHUB_OUTPUT
          fi

      # Build & push Product Service
      - name: Build & Push product-service
        run: |
          SERVER=${{ steps.acr.outputs.server }}
          docker build -t $SERVER/product-service:${{ github.sha }} ./backend/product_service
          docker tag  $SERVER/product-service:${{ github.sha }} $SERVER/product-service:testing
          docker push $SERVER/product-service:${{ github.sha }}
          docker push $SERVER/product-service:testing

      # Build & push Order Service
      - name: Build & Push order-service
        run: |
          SERVER=${{ steps.acr.outputs.server }}
          docker build -t $SERVER/order-service:${{ github.sha }} ./backend/order_service
          docker tag  $SERVER/order-service:${{ github.sha }} $SERVER/order-service:testing
          docker push $SERVER/order-service:${{ github.sha }}
          docker push $SERVER/order-service:testing

      # Build & push Customer Service (optional)
      - name: Build & Push customer-service
        continue-on-error: true
        run: |
          SERVER=${{ steps.acr.outputs.server }}
          docker build -t $SERVER/customer-service:${{ github.sha }} ./backend/customer_service || exit 0
          docker tag  $SERVER/customer-service:${{ github.sha }} $SERVER/customer-service:testing || exit 0
          docker push $SERVER/customer-service:${{ github.sha }} || exit 0
          docker push $SERVER/customer-service:testing || exit 0
