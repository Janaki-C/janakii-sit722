name: Backend CI - Test, Build and Push Images to ACR (Stage 1)

on:
  workflow_dispatch:
  push:
    branches:
      - testing
    paths:
      - 'backend/**'
      - '.github/workflows/backend_ci.yml'

env:

  ACR_NAME: ${{ secrets.ACR_NAME }}                     
  ACR_LOGIN_SERVER: ${{ secrets.ACR_LOGIN_SERVER }}     
  IMAGE_TAG: ${{ github.sha }}-${{ github.run_id }}

jobs:
  test_and_lint_backends:
    name: Run backend tests
    runs-on: ubuntu-latest

    services:
      product_db:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: products
        options: >-
          --health-cmd "pg_isready -U postgres"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      order_db:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: orders
        options: >-
          --health-cmd "pg_isready -U postgres"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5433:5432

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          # install each service's deps
          for req in backend/*/requirements.txt; do
            echo "Installing $req"
            pip install -r "$req"
          done
          # test tools
          python -m pip install pytest

      - name: Run product_service tests
        working-directory: backend/product_service
        env:
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5432
          POSTGRES_DB: products
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        run: |
          if [ -d tests ]; then pytest -q --junitxml=junit-product_service.xml; else echo "No tests"; fi

      - name: Run order_service tests
        working-directory: backend/order_service
        env:
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5433
          POSTGRES_DB: orders
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        run: |
          if [ -d tests ]; then pytest -q --junitxml=junit-order_service.xml; else echo "No tests"; fi

    

      - name: Upload JUnit reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: junit-reports
          path: |
            backend/product_service/junit-product_service.xml
            backend/order_service/junit-order_service.xml
          if-no-files-found: ignore

  build_and_push_images:
    name: Build and push images to ACR
    runs-on: ubuntu-latest
    needs: test_and_lint_backends

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Login to Azure with Service Principal (single JSON secret)
      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      # Authenticate Docker to ACR (uses the Azure CLI session)
      - name: Login to Azure Container Registry
        run: az acr login --name "$ACR_NAME"

      - name: Resolve login server (fallback if not supplied)
        id: acr
        run: |
          if [ -z "${ACR_LOGIN_SERVER}" ]; then
            echo "server=$(az acr show -n "$ACR_NAME" --query loginServer -o tsv)" >> $GITHUB_OUTPUT
          else
            echo "server=${ACR_LOGIN_SERVER}" >> $GITHUB_OUTPUT
          fi

      # Build & push Product Service
      - name: Build and Push Product Service Image
        run: |
          SERVER=${{ steps.acr.outputs.server }}
          docker build -t $SERVER/product-service:${{ github.sha }} ./backend/product_service
          docker tag  $SERVER/product-service:${{ github.sha }} $SERVER/product-service:testing
          docker push $SERVER/product-service:${{ github.sha }}
          docker push $SERVER/product-service:testing

      # Build & push Order Service
      - name: Build and Push Order Service Image
        run: |
          SERVER=${{ steps.acr.outputs.server }}
          docker build -t $SERVER/order-service:${{ github.sha }} ./backend/order_service
          docker tag  $SERVER/order-service:${{ github.sha }} $SERVER/order-service:testing
          docker push $SERVER/order-service:${{ github.sha }}
          docker push $SERVER/order-service:testing

    
