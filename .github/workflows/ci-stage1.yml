name: Stage 1 CI â€” test then build/push to ACR

on:
  push:
    branches: [ testing ]

jobs:
  test:
    name: Run unit tests
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        svc:
          - { name: customer_service, path: backend/customer_service }
          - { name: product_service,  path: backend/product_service  }
          - { name: order_service,    path: backend/order_service    }
    defaults:
      run:
        shell: bash
        working-directory: ${{ matrix.svc.path }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          python -m pip install pytest || true

      - name: Run pytest (skip gracefully if none)
        run: |
          if [ -d tests ] || ls -1 test_*.py 2>/dev/null | grep -q .; then
            pytest -q --junitxml=../junit-${{ matrix.svc.name }}.xml
          else
            echo "No tests found in $PWD; skipping."
          fi

      - name: Upload JUnit
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: junit-${{ matrix.svc.name }}
          path: ${{ matrix.svc.path }}/../junit-${{ matrix.svc.name }}.xml
          if-no-files-found: ignore

  build_and_push:
    name: Build & push images to ACR
    runs-on: ubuntu-latest
    needs: test
    strategy:
      matrix:
        image:
          - { name: customer-service, context: backend/customer_service, dockerfile: Dockerfile }
          - { name: product-service,  context: backend/product_service,  dockerfile: Dockerfile }
          - { name: order-service,    context: backend/order_service,    dockerfile: Dockerfile }
    steps:
      - name: Checkout
        uses: actions/checkout@v4

   
      - name: Docker login to ACR
        uses: docker/login-action@v3
        with:
          registry: ${{ secrets.ACR_LOGIN_SERVER }}   
          username: ${{ secrets.ACR_USERNAME }}       
          password: ${{ secrets.ACR_PASSWORD }}       

    

      - name: Set tags
        id: meta
        run: |
          echo "sha=${GITHUB_SHA::7}" >> $GITHUB_OUTPUT
          echo "branch=testing" >> $GITHUB_OUTPUT

      - name: Build & Push
        uses: docker/build-push-action@v6
        with:
          context: ${{ matrix.image.context }}
          file: ${{ matrix.image.context }}/${{ matrix.image.dockerfile }}
          push: true
          tags: |
            ${{ secrets.ACR_LOGIN_SERVER }}/${{ matrix.image.name }}:${{ steps.meta.outputs.sha }}
            ${{ secrets.ACR_LOGIN_SERVER }}/${{ matrix.image.name }}:${{ steps.meta.outputs.branch }}
          cache-from: type=registry,ref=${{ secrets.ACR_LOGIN_SERVER }}/${{ matrix.image.name }}:buildcache
          cache-to: type=registry,ref=${{ secrets.ACR_LOGIN_SERVER }}/${{ matrix.image.name }}:buildcache,mode=max
